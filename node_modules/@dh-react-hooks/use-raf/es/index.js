import { useState, useRef, useCallback, useEffect } from 'react';

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArrayLimit(arr, i) {
  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
    return;
  }

  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var useRequestAnimationFrame = function useRequestAnimationFrame(_ref) {
  var _ref$disable = _ref.disable,
      disable = _ref$disable === void 0 ? false : _ref$disable,
      duration = _ref.duration,
      callback = _ref.callback,
      onFinish = _ref.onFinish;

  var _useState = useState(!disable),
      _useState2 = _slicedToArray(_useState, 2),
      isActive = _useState2[0],
      setIsActive = _useState2[1];

  var startTime = useRef(null);
  var requestId = useRef(null);

  var start = function start() {
    setIsActive(true);
  };

  var stop = function stop() {
    setIsActive(false);
  };

  var update = useCallback(function (timestamp) {
    if (!startTime.current) {
      startTime.current = timestamp;
    }

    var elapsedTime = timestamp - startTime.current;
    callback(elapsedTime);

    if (!duration || elapsedTime < duration) {
      requestId.current = requestAnimationFrame(update);
    } else {
      if (typeof onFinish === 'function') {
        onFinish();
      }

      stop();
    }
  }, [duration, callback]);
  useEffect(function () {
    if (isActive) {
      startTime.current = null;
      requestId.current = requestAnimationFrame(update);
      return function () {
        cancelAnimationFrame(requestId.current);
      };
    }
  }, [isActive, update]);
  return {
    isActive: isActive,
    start: start,
    stop: stop
  };
};

export default useRequestAnimationFrame;
